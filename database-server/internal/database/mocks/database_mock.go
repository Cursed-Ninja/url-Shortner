// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Programming\Go\url-shortner\database-server\internal\database\conn.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	models "url-shortner-database/internal/models"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockDBInterface) FindOne(filter bson.D) (models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", filter)
	ret0, _ := ret[0].(models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockDBInterfaceMockRecorder) FindOne(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDBInterface)(nil).FindOne), filter)
}

// InsertOne mocks base method.
func (m *MockDBInterface) InsertOne(document models.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockDBInterfaceMockRecorder) InsertOne(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDBInterface)(nil).InsertOne), document)
}
